/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
@bage-name: 'bage';
@bage-x: 0px;
@bage-y: 0px;
@bage-offset-x: 0px;
@bage-offset-y: 0px;
@bage-width: 73px;
@bage-height: 72px;
@bage-total-width: 246px;
@bage-total-height: 158px;
@bage-image: 'sprite.png';
@bage: 0px 0px 0px 0px 73px 72px 246px 158px 'sprite.png' 'bage';
@cup-name: 'cup';
@cup-x: 86px;
@cup-y: 92px;
@cup-offset-x: -86px;
@cup-offset-y: -92px;
@cup-width: 60px;
@cup-height: 64px;
@cup-total-width: 246px;
@cup-total-height: 158px;
@cup-image: 'sprite.png';
@cup: 86px 92px -86px -92px 60px 64px 246px 158px 'sprite.png' 'cup';
@heart-name: 'heart';
@heart-x: 185px;
@heart-y: 0px;
@heart-offset-x: -185px;
@heart-offset-y: 0px;
@heart-width: 61px;
@heart-height: 59px;
@heart-total-width: 246px;
@heart-total-height: 158px;
@heart-image: 'sprite.png';
@heart: 185px 0px -185px 0px 61px 59px 246px 158px 'sprite.png' 'heart';
@pensil-name: 'pensil';
@pensil-x: 0px;
@pensil-y: 92px;
@pensil-offset-x: 0px;
@pensil-offset-y: -92px;
@pensil-width: 66px;
@pensil-height: 66px;
@pensil-total-width: 246px;
@pensil-total-height: 158px;
@pensil-image: 'sprite.png';
@pensil: 0px 92px 0px -92px 66px 66px 246px 158px 'sprite.png' 'pensil';
@t-shirt-name: 't-shirt';
@t-shirt-x: 93px;
@t-shirt-y: 0px;
@t-shirt-offset-x: -93px;
@t-shirt-offset-y: 0px;
@t-shirt-width: 72px;
@t-shirt-height: 72px;
@t-shirt-total-width: 246px;
@t-shirt-total-height: 158px;
@t-shirt-image: 'sprite.png';
@t-shirt: 93px 0px -93px 0px 72px 72px 246px 158px 'sprite.png' 't-shirt';
@spritesheet-width: 246px;
@spritesheet-height: 158px;
@spritesheet-image: 'sprite.png';
@spritesheet-sprites: @bage @cup @heart @pensil @t-shirt;
@spritesheet: 246px 158px 'sprite.png' @spritesheet-sprites;

/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
.sprite-width(@sprite) {
  width: extract(@sprite, 5);
}

.sprite-height(@sprite) {
  height: extract(@sprite, 6);
}

.sprite-position(@sprite) {
  @sprite-offset-x: extract(@sprite, 3);
  @sprite-offset-y: extract(@sprite, 4);
  background-position: @sprite-offset-x @sprite-offset-y;
}

.sprite-image(@sprite) {
  @sprite-image: extract(@sprite, 9);
  @sprite-image-bare: ~`"@{sprite-image}".slice(1, -1)`;
  background-image: url(@sprite-image-bare);
}

.sprite(@sprite) {
  .sprite-image(@sprite);
  .sprite-position(@sprite);
  .sprite-width(@sprite);
  .sprite-height(@sprite);
}

/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
.sprites(@sprites, @i: 1) when (@i <= length(@sprites)) {
  @sprite: extract(@sprites, @i);
  @sprite-name: e(extract(@sprite, 10));
  .@{sprite-name} {
    .sprite(@sprite);
  }
  .sprites(@sprites, @i + 1);
}
